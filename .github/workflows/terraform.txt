name: "Terraform"

on:
  workflow_dispatch:

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    outputs:
      image_version: ${{ steps.terraform_outputs.outputs.image_version }}
    defaults:
      run:
        working-directory: ./terraform
    permissions:
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Add profile credentials to ~/.aws/credentials
        run: |
           aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID}} --profile test1
           aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }} --profile test1

           
      - name: install docker
        env:
           USERNAME: ${{secrets.DOCKER_USERNAME}}
           PASSWORD: ${{secrets.DOCKER_PWD}}
        run: | 
             chmod +x ../terraform/commands/install_docker.sh
             chmod +x ../terraform/commands/pull_push.sh
             ../terraform/commands/install_docker.sh $USERNAME $PASSWORD
        shell: bash
      - name: docker status
        run: |
              docker --version
             
        

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        

      

      - name: Terraform Init
        id: init
        run: terraform init
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
     

      - name: Terraform Plan
        id: plan
        run: terraform plan  -no-color -input=true 
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: | 
            terraform apply -input=true
             
        
      - name : Terraform outputs
        id: terraform_outputs
        run: |
             echo $(terraform-bin output -raw image_version)
             echo "image_version=$(terraform-bin output -raw image_version)">>"$GITHUB_OUTPUT"
             

             
        
  #call-to-deploy:
    #needs: terraform
    #permissions: 
       #contents: read
       #id-token: write
    #uses: ./.github/workflows/deploy.yml
    #with:
      #image_tag : ${{needs.terraform.outputs.image_version}}
    #secrets: inherit
   
  
   
        
  
     
